
plugins {
    id 'com.jfrog.bintray' version '1.1'
    id 'com.github.jruby-gradle.base' version '0.1.5'
    id 'java'
}

import com.github.jrubygradle.JRubyExec

allprojects {
    group = 'org.embulk.input.jdbc'
    version = '0.6.0'

    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.7.1.201405082137'
    }
}

subprojects {
    apply plugin: 'maven'  // install jar files to the local repo: $ gradle install
    apply plugin: 'java'
    //apply plugin: 'findbugs'
    apply plugin: 'com.github.jruby-gradle.base'

    repositories {
        mavenCentral()
        jcenter()
    }

    configurations {
        provided
    }

    dependencies {
        compile  'org.embulk:embulk-core:0.7.4'
        provided 'org.embulk:embulk-core:0.7.4'
        testCompile 'junit:junit:4.+'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" //<< "-Xlint:deprecation"
        }
    }

    task classpath(type: Copy, dependsOn: ["jar"]) {
        doFirst { file('classpath').deleteDir() }
        from (configurations.runtime - configurations.provided + files(jar.archivePath))
        into 'classpath'
    }
    clean { delete 'classpath' }

    task gem(type: JRubyExec, dependsOn: ['build', 'gemspec', 'classpath']) {
        jrubyArgs '-rrubygems/gem_runner', "-eGem::GemRunner.new.run(ARGV)", 'build'
        script "${project.projectDir.absolutePath}/build/gemspec"
        doLast { ant.move(file: "${project.name}-${project.version}.gem", todir: "${parent.projectDir}/pkg") }
    }

    task gemspec << {
        file('build').mkdirs();
        file('build/gemspec').write($/
Gem::Specification.new do |spec|
  spec.name          = "${project.name}"
  spec.version       = "${project.version}"
  spec.authors       = ["Sadayuki Furuhashi"]
  spec.summary       = %[JDBC input plugin for Embulk]
  spec.description   = %[Selects records from a table.]
  spec.email         = ["frsyuki@gmail.com"]
  spec.licenses      = ["Apache 2.0"]
  spec.homepage      = "https://github.com/embulk/embulk-input-jdbc"

  spec.files         = `git ls-files`.split("\n") + Dir["classpath/*.jar"]
  spec.test_files    = spec.files.grep(%r"^(test|spec)/")
  spec.require_paths = ["lib"]
end
/$)
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

task gemPush << {
    "gem push pkg/embulk-input-jdbc-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-input-mysql-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-input-postgresql-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-input-redshift-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-input-oracle-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-input-sqlserver-${project.version}.gem".execute().waitFor()
}
